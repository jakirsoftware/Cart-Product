function doGet() {
  return HtmlService.createHtmlOutputFromFile('index');
}

// Generate a unique product ID
function generateUniqueId() {
  return `PROD-${new Date().getTime()}-${Math.floor(Math.random() * 1000)}`;
}

// Fetch all products from Sheet1
function getProducts() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sheet1');
  const data = sheet.getDataRange().getValues();

  return data.slice(1).map(row => ({
    id: row[3], // Product ID (Column D)
    name: row[0], // Product Name (Column A)
    image: row[1], // Product Image URL (Column B)
    price: row[2], // Product Price (Column C)
  }));
}

// Add a new product to Sheet1
function addProduct(name, price, imageUrl) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sheet1');
  const lastRow = sheet.getLastRow() + 1;
  const id = generateUniqueId(); // Generate a unique ID

  sheet.getRange(lastRow, 1).setValue(name); // Name in Column A
  sheet.getRange(lastRow, 2).setValue(imageUrl); // Image URL in Column B
  sheet.getRange(lastRow, 3).setValue(price); // Price in Column C
  sheet.getRange(lastRow, 4).setValue(id); // ID in Column D
}

// Update an existing product
function updateProduct(id, newName, newPrice, newImageUrl) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sheet1');
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < data.length; i++) {
    if (data[i][3] === id) { // Match by Product ID
      sheet.getRange(i + 1, 1).setValue(newName); // Update Name
      sheet.getRange(i + 1, 2).setValue(newImageUrl); // Update Image URL
      sheet.getRange(i + 1, 3).setValue(newPrice); // Update Price
      break;
    }
  }
}

// Delete a product by ID
function deleteProduct(id) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sheet1');
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < data.length; i++) {
    if (data[i][3] === id) { // Match by Product ID
      sheet.deleteRow(i + 1);
      break;
    }
  }
}

// Duplicate a product with a new unique ID
function duplicateProduct(id) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sheet1');
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < data.length; i++) {
    if (data[i][3] === id) { // Match by Product ID
      const newName = `${data[i][0]} (Copy)`; // Append "(Copy)" to Name
      const newImage = data[i][1]; // Image URL
      const newPrice = data[i][2]; // Price
      const newId = generateUniqueId(); // New Unique ID
      const lastRow = sheet.getLastRow() + 1;

      sheet.getRange(lastRow, 1).setValue(newName); // Name in Column A
      sheet.getRange(lastRow, 2).setValue(newImage); // Image URL in Column B
      sheet.getRange(lastRow, 3).setValue(newPrice); // Price in Column C
      sheet.getRange(lastRow, 4).setValue(newId); // ID in Column D
      break;
    }
  }
}
-------------------------------
<!DOCTYPE html>
<html>
  <head>
    <title>Product Manager</title>
    <script>
      let products = []; // Store all products for filtering

      function loadProducts() {
        google.script.run.withSuccessHandler(displayProducts).getProducts();
      }

      function displayProducts(productData) {
        products = productData; // Update the global product list
        renderProducts(productData); // Render all products
      }

      function renderProducts(productList) {
        const container = document.getElementById('productContainer');
        container.innerHTML = ''; // Clear existing content
        let total = 0;

        if (productList.length === 0) {
          container.innerHTML = '<p>No products found.</p>';
          document.getElementById('totalPrice').innerText = 'Total: $0.00';
          return;
        }

        productList.forEach(product => {
          total += parseFloat(product.price);
          const productCard = `
            <div class="product-card" id="product-${product.id}">
              <h3 class="product-id">ID: ${product.id}</h3>
              <img src="${product.image}" alt="${product.name}" class="product-image" />
              <h3 class="product-name">${product.name}</h3>
              <p class="product-price">$${product.price}</p>
              <button onclick="editProduct('${product.id}')">Edit</button>
              <button onclick="deleteProduct('${product.id}')">Delete</button>
              <button onclick="duplicateProduct('${product.id}')">Duplicate</button>
            </div>
          `;
          container.innerHTML += productCard;
        });

        document.getElementById('totalPrice').innerText = `Total: $${total.toFixed(2)}`;
      }

      function searchProducts() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const filteredProducts = products.filter(product =>
          product.name.toLowerCase().includes(searchTerm)
        );
        renderProducts(filteredProducts);
      }

      function editProduct(id) {
        const product = products.find(p => p.id === id);
        const newName = prompt('Edit product name:', product.name);
        const newPrice = prompt('Edit product price:', product.price);
        const newImage = prompt('Edit product image URL:', product.image);

        if (newName && newPrice && newImage) {
          google.script.run.updateProduct(id, newName, parseFloat(newPrice), newImage);
          loadProducts();
        }
      }

      function deleteProduct(id) {
        if (confirm('Are you sure you want to delete this product?')) {
          google.script.run.deleteProduct(id);
          loadProducts();
        }
      }

      function duplicateProduct(id) {
        google.script.run.duplicateProduct(id);
        loadProducts();
      }

      window.onload = loadProducts;
    </script>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f9;
      }
      .product-card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 15px;
        margin: 10px;
        width: 200px;
        display: inline-block;
        text-align: center;
        background-color: #fff;
      }
      .product-image {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
      }
      .product-id {
        color: #666;
        font-size: 14px;
      }
      .product-name {
        font-size: 18px;
        margin: 10px 0;
      }
      .product-price {
        color: #28a745;
        font-size: 16px;
        font-weight: bold;
      }
      button {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px;
        margin: 5px;
        border-radius: 5px;
        cursor: pointer;
      }
      button:hover {
        background-color: #0056b3;
      }
      #productContainer {
        padding: 20px;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
      }
      #totalPrice {
        text-align: center;
        font-size: 20px;
        margin-top: 20px;
        font-weight: bold;
      }
      #searchContainer {
        text-align: center;
        margin: 20px 0;
      }
      #searchInput {
        padding: 10px;
        width: 300px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
      }
      #searchButton {
        padding: 10px 15px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
      }
      #searchButton:hover {
        background-color: #218838;
      }
    </style>
  </head>
  <body>
    <h1 style="text-align: center;">Product Manager</h1>
    <div id="searchContainer">
      <input
        type="text"
        id="searchInput"
        placeholder="Search by product name..."
        oninput="searchProducts()"
      />
    </div>
    <div id="productContainer"></div>
    <div id="totalPrice">Total: $0.00</div>
  </body>
</html>
